version: '3.8'

services:
  user_service:
    build:
      context: ./services/user_service
    ports:
      - "8000:8000"
    volumes:
      - ./services/user_service:/app
    depends_on:
      - db
      - redis
    env_file:
      - .env
    networks:
      - app_network
    restart: always

  learning_service:
    build:
      context: ./services/learning_service
    ports:
      - "8001:8001"
    volumes:
      - ./services/learning_service:/app
    depends_on:
      - db
      - redis
    env_file:
      - .env
    networks:
      - app_network
    restart: always

  assessment_service:
    build:
      context: ./services/assessment_service
    ports:
      - "8002:8002"
    volumes:
      - ./services/assessment_service:/app
    depends_on:
      - db
      - redis
      - user_service
      - auth_service
    env_file:
      - .env
    networks:
      - app_network
    restart: always

  auth_service:
    build:
      context: ./services/authentication_service
    ports:
      - "8003:8003"
    depends_on:
      - db
      - user_service
    env_file:
      - .env
    networks:
      - app_network
    restart: always

  db:
    image: postgres:latest
    environment:
      - POSTGRES_USER=${POSTGRES_USER}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
      - POSTGRES_DB=${POSTGRES_DB}
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
    networks:
      - app_network
    restart: always

  redis:
    image: redis:latest
    container_name: redis
    ports:
      - "6379:6379"
    command: ["redis-server", "--save", "", "--appendonly", "no"]
    networks:
      - app_network
    restart: always

volumes:
  postgres_data:

networks:
  app_network:
    driver: bridge
